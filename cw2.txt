-- 1. Usuń wszystkie tabele ze swojej bazy
BEGIN
    FOR rec IN (SELECT table_name FROM user_tables) LOOP
        EXECUTE IMMEDIATE 'DROP TABLE ' || rec.table_name || ' CASCADE CONSTRAINTS';
    END LOOP;
END;
/

-- 2. Skopiuj wszystkie tabele z użytkownika HR
BEGIN
    FOR rec IN (SELECT table_name FROM all_tables WHERE owner = 'HR') LOOP
        EXECUTE IMMEDIATE 'CREATE TABLE ' || rec.table_name || ' AS SELECT * FROM HR.' || rec.table_name;
    END LOOP;
END;
/

-- Ustaw klucze główne i obce
ALTER TABLE employees ADD CONSTRAINT emp_pk PRIMARY KEY (employee_id);
ALTER TABLE departments ADD CONSTRAINT dept_pk PRIMARY KEY (department_id);
ALTER TABLE employees ADD CONSTRAINT emp_dept_fk FOREIGN KEY (department_id) REFERENCES departments(department_id);

-- 3. Zadania SQL
-- 3.1 Wypisz nazwisko i zarobki dla osób z departamentów 20 i 50, zarobki między 2000 a 7000
CREATE OR REPLACE VIEW wynagrodzenie_d20_d50 AS
SELECT last_name || ' ' || salary AS wynagrodzenie
FROM employees
WHERE department_id IN (20, 50) AND salary BETWEEN 2000 AND 7000
ORDER BY last_name;

-- 3.2 Informacja o zatrudnieniu w 2005, dla osób mających menadżera
CREATE OR REPLACE VIEW zatrudnienie_2005 AS
SELECT hire_date, last_name, :column_name
FROM employees
WHERE manager_id IS NOT NULL AND EXTRACT(YEAR FROM hire_date) = 2005
ORDER BY :column_name;

-- 3.3 Imię i nazwisko razem, zarobki, numer telefonu, sortowanie według kolumn
CREATE OR REPLACE VIEW pracownicy_z_telefonem AS
SELECT first_name || ' ' || last_name AS pelne_imie, salary, phone_number
FROM employees
WHERE SUBSTR(last_name, 3, 1) = 'e' AND INSTR(first_name, :part_of_name) > 0
ORDER BY pelne_imie DESC, salary ASC;

-- 3.4 Liczba miesięcy przepracowanych + bonus
CREATE OR REPLACE VIEW przepracowane_miesiace AS
SELECT first_name, last_name, ROUND(MONTHS_BETWEEN(SYSDATE, hire_date)) AS liczba_miesiecy,
       CASE
           WHEN ROUND(MONTHS_BETWEEN(SYSDATE, hire_date)) < 150 THEN salary * 0.1
           WHEN ROUND(MONTHS_BETWEEN(SYSDATE, hire_date)) BETWEEN 150 AND 200 THEN salary * 0.2
           ELSE salary * 0.3
       END AS wysokosc_dodatku
FROM employees
ORDER BY liczba_miesiecy;

-- 3.5 Działy z minimalną płacą > 5000, suma i średnia zarobków
CREATE OR REPLACE VIEW dzialy_zarobki AS
SELECT department_id, ROUND(SUM(salary), 0) AS suma_zarobkow, ROUND(AVG(salary), 0) AS srednia_zarobkow
FROM employees
GROUP BY department_id
HAVING MIN(salary) > 5000;

-- 3.6 Pracownicy z Toronto
CREATE OR REPLACE VIEW toronto_pracownicy AS
SELECT e.last_name, e.department_id, d.department_name, e.job_id
FROM employees e
JOIN departments d ON e.department_id = d.department_id
JOIN locations l ON d.location_id = l.location_id
WHERE l.city = 'Toronto';

-- 3.7 Pracownicy współpracujący z Jennifer
CREATE OR REPLACE VIEW wspolpracownicy_jennifer AS
SELECT e1.first_name || ' ' || e1.last_name AS pracownik,
       e2.first_name || ' ' || e2.last_name AS wspolpracownik
FROM employees e1
JOIN employees e2 ON e1.department_id = e2.department_id
WHERE e1.first_name = 'Jennifer' AND e1.employee_id != e2.employee_id;

-- 3.8 Departamenty bez pracowników
CREATE OR REPLACE VIEW puste_dzialy AS
SELECT d.department_id, d.department_name
FROM departments d
LEFT JOIN employees e ON d.department_id = e.department_id
WHERE e.employee_id IS NULL;

-- 3.9 Kopiuj tabelę job_grades
CREATE TABLE job_grades AS SELECT * FROM HR.job_grades;

-- 3.10 Pracownicy z odpowiednim grade
CREATE OR REPLACE VIEW pracownicy_grade AS
SELECT e.first_name, e.last_name, e.job_id, d.department_name, e.salary, j.grade_level
FROM employees e
JOIN departments d ON e.department_id = d.department_id
JOIN job_grades j ON e.salary BETWEEN j.lowest_sal AND j.highest_sal;

-- 3.11 Pracownicy zarabiający więcej niż średnia
CREATE OR REPLACE VIEW powyzej_sredniej AS
SELECT first_name, last_name, salary
FROM employees
WHERE salary > (SELECT AVG(salary) FROM employees)
ORDER BY salary DESC;

-- 3.12 Pracownicy w departamencie z osobami mającymi "u" w nazwisku
CREATE OR REPLACE VIEW osoby_w_dzialach_u AS
SELECT DISTINCT e.employee_id, e.first_name, e.last_name
FROM employees e
WHERE e.department_id IN (
    SELECT department_id
    FROM employees
    WHERE last_name LIKE '%u%'
);
